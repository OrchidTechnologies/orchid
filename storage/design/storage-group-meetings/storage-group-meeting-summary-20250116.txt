
Meeting: Settlement Contract Verification & Completeness Constraints in Decentralized Storage

Overview

This meeting was a deep technical discussion refining the data requirements and verification steps for the settlement contract in the Orchid decentralized storage system. The team reviewed prior work, clarified outstanding issues, and identified necessary refinements to ensure both correctness (valid commitments) and completeness (ensuring a provider is actively storing data when required). The discussion focused on how commitments are verified on-chain, how to efficiently prove data commitments, and how to prevent equivocation.

Key Technical Discussion Points

1. Revisiting the Settlement Contract Data Requirements
	•	The discussion began with reviewing prior work on the settlement contract to ensure the necessary data is provided for verification.
	•	The group reviewed how the settlement verification involves checking multiple commitment periods, requiring proofs at different time intervals.

2. Required Data for Settlement Verification

The contract needs to validate four key components at the time of settlement:
	1.	Commitment (P): The polynomial commitment proving a provider stored the expected data.
	2.	Proof: The cryptographic proof to verify that the commitment corresponds to the claimed data.
	3.	Evaluation Point (Z): The X-coordinate value where the polynomial is evaluated (linked to the commitment period).
	4.	Evaluation Value (Y): The result of evaluating the polynomial at Z, representing the stored data.

3. Ensuring Completeness: Matching Data to Rate Certificates
	•	After proving a commitment contains a valid subblock (Y), we must show it is part of the correct rate certificate (R).
	•	The rate certificate contains a root identifier, committing to the entirety of the stored data.
	•	The proof system needs to establish that:
	•	The subblock identifier in P matches an entry in R.
	•	R was included in Q, the client provider mapping polynomial, which the cohort uses for verification.

4. Ensuring Non-Equivocation & Public Verification
	•	Cohort members can monitor Q in real-time and verify that a provider has committed to the correct client data.
	•	Without this, a provider could equivocate by committing different data privately (settlement contract) vs publicly (cohort monitoring).
	•	A KZG opening proof must link the values in P and Q to ensure the client list seen by the cohort is the same one verified on-chain.

5. Storage of Random Beacon for Proof Verification
	•	The random beacon (used to select subblocks) must be available for verification at settlement time.
	•	Options discussed:
	•	Store beacons in contract storage (adds cost but ensures availability).
	•	Use block hashes, but they expire after 256 blocks (~64 hours), limiting historical verification.
	•	Other on-chain sources.

6. Storage Costs & Feasibility
	•	Storing commitments & beacons in contract storage was suggested as the simplest default.
	•	Estimated storage cost for 32 bytes per commitment: 20,000 gas ($0.50 at current Ethereum gas prices).
	•	This was considered reasonable but requires further cost analysis.
    *  (rollups also possible)


Step-by-Step Verification Plan
	1.	Validate that the commitment contains the correct data:
	•	Use KZG proof verification to confirm that ￼ for a provided proof.
	•	Ensures that the provider actually committed to storing data.
	2.	Ensure the data is part of the correct rate certificate:
	•	Verify that ￼ appears in R (rate certificate commitment).
	•	Use a KZG proof on R to confirm that ￼.
	3.	Prove that the provider publicly advertised these commitments:
	•	Check that the subblock data in P corresponds to a client in Q.
	•	Ensure Q was published in the commitment period, preventing equivocation.
	•	Cohorts actively monitor Q to detect missing commitments.
	4.	Verify the random beacon’s correctness:
	•	Ensure that the evaluation index (Z) corresponds to the correct time period.
	•	If using a stored beacon, directly reference it in contract storage.
	•	If using block hashes, verify they haven’t expired.

Key Takeaways
	•	Settlement verification involves proving correctness (commitments to real data) and completeness (ensuring claims match public commitments).
	•	Cohorts play a crucial role in catching failures in real-time by monitoring Q.
	•	Commitments, proofs, and beacons must be carefully stored or verified to prevent equivocation.
	•	Storage costs are a concern but seem reasonable given the constraints.
	•	Next steps involve improving documentation, validating feasibility, and preparing for final implementation decisions.

